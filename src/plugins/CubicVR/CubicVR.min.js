/**
*
* MOD3  Plugin for CubicVR.js
*
*
**/
!function(t){"use strict";var e=t.ModConstant,r=(e.X,e.Y,e.Z,t.XYZi),n=t.VecArray,u=t.Class(t.VertexProxy,{constructor:function(t,e){this.$super("constructor",[t,e]),this.name="VertexCubicVR"},setVertex:function(t){var e=this;return e.vertex=t,e.original=new n([t[0],t[1],t[2]]),e},getXYZ:function(){var t=this.vertex,e=new n(3);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e},getX:function(){return this.vertex[0]},getY:function(){return this.vertex[1]},getZ:function(){return this.vertex[2]},getValue:function(t){return this.vertex[r[t]]||0},setXYZ:function(t){var e=this.vertex;return e[0]=t[0],e[1]=t[1],e[2]=t[2],this},setX:function(t){return this.vertex[0]=t,this},setY:function(t){return this.vertex[1]=t,this},setZ:function(t){return this.vertex[2]=t,this},setValue:function(t,e){return this.vertex[r[t]]=e,this},reset:function(){var t=this,e=t.vertex,r=t.original;return e[0]=r[0],e[1]=r[1],e[2]=r[2],t},collapse:function(){var t=this,e=t.vertex,r=t.original;return r[0]=e[0],r[1]=e[1],r[2]=e[2],t}}),e=t.Class(t.MeshProxy,{constructor:function(t){this.$super("constructor",[t]),this.name="MeshCubicVR"},init:function(t){var e=this;e.$super("init",[t]);var r,n,i=t.obj.points,s=i.length;for(e.faces=null,e.vertices=r=new Array(s),n=0;n<s;++n)r[n]=new u(i[n],e);return e},update:function(){return this.mesh.dirty=!0,this},updateMeshPosition:function(t){var e=this.mesh.position,t=t.xyz;return e[0]+=t[0],e[1]+=t[1],e[2]+=t[2],this}});t.LibraryCubicVR={id:"CubicVR",Mesh:e,Vertex:u}}(MOD3);