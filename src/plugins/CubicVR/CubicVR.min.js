/**
*
* MOD3  Plugin for CubicVR.js
*
*
**/
!function(t,e){"use strict";var r,n,i=t.ModConstant,s=(i.X,i.Y,i.Z,t.XYZi),u=t.VecArray;r=t.VertexCubicVR=t.Class(t.VertexProxy,{constructor:function(t,e){var r=this;r.$super("constructor",t,e),r.name="VertexCubicVR"},setVertex:function(t){var e=this;return e.vertex=t,e.original=new u([t[0],t[1],t[2]]),e},getXYZ:function(){var t=this.vertex,e=new u(3);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e},getX:function(){return this.vertex[0]},getY:function(){return this.vertex[1]},getZ:function(){return this.vertex[2]},getValue:function(t){return this.vertex[s[t]]||0},setXYZ:function(t){var e=this.vertex;return e[0]=t[0],e[1]=t[1],e[2]=t[2],this},setX:function(t){return this.vertex[0]=t,this},setY:function(t){return this.vertex[1]=t,this},setZ:function(t){return this.vertex[2]=t,this},setValue:function(t,e){return this.vertex[s[t]]=e,this},reset:function(){var t=this,e=t.vertex,r=t.original;return e[0]=r[0],e[1]=r[1],e[2]=r[2],t},collapse:function(){var t=this,e=t.vertex,r=t.original;return r[0]=e[0],r[1]=e[1],r[2]=e[2],t}}),n=t.MeshCubicVR=t.Class(t.MeshProxy,{constructor:function(t){var e=this;e.$super("constructor",t),e.name="MeshCubicVR"},init:function(t){var e=this;e.$super("init",t);var n,i,s=t.obj.points,u=s.length;for(e.faces=null,e.vertices=n=new Array(u),i=0;u>i;i++)n[i]=new r(s[i],e);return e},update:function(){var t=this;return t.mesh.dirty=!0,t},updateMeshPosition:function(t){var e=this,r=e.mesh.position,n=t.xyz;return r[0]+=n[0],r[1]+=n[1],r[2]+=n[2],e}}),t.LibraryCubicVR={id:"CubicVR",Mesh:n,Vertex:r}}(MOD3);